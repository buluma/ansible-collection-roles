---
# tasks file for daemonize

# pretasks
- name: Ensure build dependencies are installed (RedHat).
  ansible.builtin.yum: 'name="{{ item }}" state=present'
  with_items:
    - "@Development tools"
    - tar
    - unzip
  when: ansible_os_family == 'RedHat'

- name: Update apt cache.
  ansible.builtin.apt: update_cache=true cache_valid_time=600
  when: ansible_os_family == 'Debian'
  changed_when: false

- name: Ensure build dependencies are installed (Debian).
  ansible.builtin.apt: 'name="{{ item }}" state=present'
  with_items:
    - build-essential
    - unzip
    - tar
    - sudo
  when: ansible_os_family == 'Debian'

- name: Download daemonize archive.
  ansible.builtin.get_url:
    url: "https://github.com/bmc/daemonize/archive/release-{{ daemonize_version }}.tar.gz"
    dest: "{{ workspace }}/daemonize-{{ daemonize_version }}.tar.gz"
    mode: 0644

- name: Expand daemonize archive.
  ansible.builtin.unarchive:
    src: "{{ workspace }}/daemonize-{{ daemonize_version }}.tar.gz"
    dest: "{{ workspace }}"
    creates: "{{ workspace }}/daemonize-release-{{ daemonize_version }}/INSTALL"
    copy: false
    mode: 0755

- name: Check if daemonize is installed.
  ansible.builtin.command: which daemonize
  changed_when: false
  failed_when: false
  register: daemonize_installed

- name: Build daemonize.
  ansible.builtin.command: >
    {{ item }}
    chdir={{ workspace }}/daemonize-release-{{ daemonize_version }}
  when: daemonize_installed.rc != 0
  ignore_errors: "{{ ansible_check_mode }}"
  with_items:
    - "./configure --prefix={{ daemonize_install_path }}"
    - make
    - make install
  become: true
