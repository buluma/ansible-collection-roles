---
# tasks file for ansible-role-nagios
- name: Load platform variables
  ansible.builtin.include_vars:
    file: "{{ lookup('first_found', vars_files, errors='ignore') }}"
  vars:
    vars_files:
      files:
        - "{{ role_path }}/vars/{{ ansible_distribution | lower }}/\
           {{ ansible_distribution_major_version }}.yml"
        - "{{ role_path }}/vars/{{ ansible_distribution | lower }}/main.yml"
        - "{{ role_path }}/vars/{{ ansible_os_family | lower }}/main.yml"
        - "{{ role_path }}/vars/main.yml"

- name: Set up role-specific facts based on some inputs and the OS distribution
  include_tasks:
    file: role_facts.yml

- name: Load platform dependencies
  include_tasks:
    file: "{{ tasks_filename }}"
  vars:
    tasks_files:
      - "{{ role_path }}/tasks/dependencies/\
        {{ ansible_distribution | lower }}/\
        {{ ansible_distribution_major_version }}.yml"
      - "{{ role_path }}/tasks/dependencies/\
        {{ ansible_distribution | lower }}/\
        main.yml"
      - "{{ role_path }}/tasks/dependencies/\
        {{ ansible_os_family | lower }}.yml"
      - "{{ role_path }}/tasks/dependencies/main.yml"
  loop: "{{ query('first_found', tasks_files, errors='ignore') }}"
  loop_control:
    loop_var: tasks_filename

- name: Create nagios group
  group:
    name: "{{ nagios_group }}"

- name: Create the nagios user
  user:
    name: "{{ nagios_user }}"
    group: "{{ nagios_group }}"

- name: Install naigos core source
  include_tasks: "install_nagios_core.yml"

- name: Install naigos core source
  include_tasks: "install_nagios_plugins.yml"

- block:
    - name: Create a temp path for configs
      tempfile:
        state: directory
      register: tmpconfig
      changed_when: false

    - name: Backup all configs
      synchronize:
        src: "{{ nagios_config_dir }}/"
        dest: "{{ tmpconfig.path }}/"
        owner: true
        group: true
        perms: true
      delegate_to: "{{ inventory_hostname }}"
      changed_when: false
      register: __cfg_backup

    - name: Install configuration files
      include_tasks: "install_config.yml"
      loop: "{{ nagios_configs }}"
      loop_control:
        loop_var: nagios_config

    - name: Test nagios against the main nagios config
      command: >-
        {{ nagios_bin_path }} -v '{{ __nagios_primary_config_file }}'
      changed_when: false
  rescue:
    - name: Restore backed up configs
      synchronize:
        src: "{{ tmpconfig.path }}/"
        dest: "{{ nagios_config_dir }}/"
        owner: true
        group: true
        perms: true
        delete: true
      delegate_to: "{{ inventory_hostname }}"

    - name: After the backup has been restored, fail
      fail:
        msg: "There was an error with one of your nagios config files"
  always:
    - name: Cleanup temp path
      file:
        path: "{{ tmpconfig.path }}"
        state: absent
      changed_when: false

- name: Set the service state
  service:
    name: "{{ nagios_service_name }}"
    state: "{%- if nagios_service_state is not none -%}{{ nagios_service_state }}{%- else -%}{{ omit }}{%- endif -%}"
    enabled: "{{ nagios_service_enabled }}"
