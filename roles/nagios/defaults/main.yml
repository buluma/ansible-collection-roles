---
# defaults file for nagios
# Declare the number of packages to be installed by this role.
# Defaults are dependent on the disribution. These will be instaled
# when this value is `null`. You can prevent any packages from being installed
# by setting it to an empty list (`[]`)
nagios_packages: null

# Allow the role to install the epel-release package in CentOS (required for
# packages for nagios plugins). Set to false if you don't want this to happen
# here (eg. when you manage this elsewhere, or you have other repos that
# satisfy the plugin package requirements)
nagios_centos_install_epel: true

# These packages are additionally installed for your distribution to satisfy
# the default dependencies of the nagios-plugins release. As with the
# `nagios_packages` value, you can leave this null to use the defaults for this
# role (which will match those packages from the standard nagios install
# instructions) or you can set them here yourself. A empty list will prevent
# any additional packages from being installed.
nagios_plugin_packages: null

# If you have packages that you want installed in addition to the defaults that
# come from `nagios_plugin_packages`, set them here. By usnig this list,
# you don't have to duplicate the standard requirements in order to include
# extra packages that may be required for your custom plugins.
nagios_extra_plugin_packages: []

# The nagios system username
# Something to be awae of:
# The nagios installer has user "nagios" and group "nagios" hard-coded into
# their Makefiles, so you're probably going to want to stick with these
# defaults unless you find yourself in a special situation, probably with
# nagios already installed external to this role.
nagios_user: nagios

# The nagios system group name
nagios_group: nagios

# The prefix path to pass to the ./configure script (as is shown in the
# `nagios_source_configure_args`) list.
# In addition to the configure args, this value is used to determine the full
# path of the nagios binary and other associated files.
nagios_prefix_dir: /usr/local

# This is the root location for nagios configuration files.
nagios_config_dir: /usr/local/etc/nagios

# The location of the nagios binary
nagios_bin_path: /usr/local/bin/nagios

# Nagios service details
nagios_service_name: nagios
nagios_service_state: started
nagios_service_enabled: true

# Restart state used for the nagios service handler when a configuration has
# changed.
nagios_service_restart_state: restarted

# The download source for nagios core. See the note about `nagios_source_version`.
nagios_source_tarball: https://github.com/NagiosEnterprises/nagioscore/archive/nagios-4.4.6.tar.gz

# Arguments to pass to './configure' when building nagios from source.
nagios_source_configure_args:
  - "--prefix={{ nagios_prefix_dir }}"
  - "--sysconfdir={{ nagios_config_dir }}"

# When set, the role will install the specified version. If nagios is already
# installed, but is of a different version, nagios will be re-installed.
# If unset, any nagios install will be considered value.
#
# Please note that no special work is done to ensure that the resource from
# `nagios_source_tarball` matches this version. So if the version is set here,
# and it doesn't match the one referenced in the `nagios_source_tarball`
# variable, this role will end up continually installing nagios since the
# installed nagios version will never match the version listed here.
nagios_source_version: 4.4.6

# Since the default nagios core install will fail without the additional nagios
# plugins, this role also installs the nagios plugins from this tarball.
# This role does a very weak job of preventing constant reinstalls from scratch
# by caching the `nagios_plugin_source_version` and checking it on every
# incarnation. There's no real connection between
# `nagios_plugin_source_tarball` and this value, but at least it's a somewhat
# convenient way of saving you from downloading and installing this suff
# over and over again.
nagios_plugin_source_tarball: https://github.com/nagios-plugins/nagios-plugins/releases/download/release-2.3.3/nagios-plugins-2.3.3.tar.gz

# See the comment about the previous variable.
nagios_plugin_source_version: 2.3.3

# When true, the .service and/or init.d files for managing the nagios service
# will be installed through the nagios source package
# (with make install-daemoninit).
# When false, this role will install a custom .service or init.d script.
#
# Using this role for managing these files is useful in case values in the role
# change that might affect the contents of those files
nagios_source_install_service: false

# A host may have set its /tmp dir to noexec, which will prevent installation
# by removing the ability to run ./configure on the unarchived source package
# in its tmpdir. This value lets you change your tmpdir to something else
# (like maybe something under your home directory).
nagios_source_tempfile_path: "/tmp"

# New/updated directories under the config path will have these permissions
# if not specified.
nagios_default_config_dir_mode: "0750"
# New/updated files under the config path will have these permissions if
# not specified.
nagios_default_config_file_mode: "0640"

# This is the main/first-loaded nagios config file.
# When unset, a default value of `nagios_config_dir`/nagios.cfg will
# be used.
nagios_primary_config_file: null

# This is a list of nagios configurations. Each entry in this list can have
# the following values:
#   src (optional):    The source file or directory of nagios config file(s)
#                      Either this or the `config` value must exist in this
#                      entry.
#   config (optional): This bit can be a little bit complicated since nagios
#                      configs can have a few different data types. This should
#                      allow you to entirely create nagios configuration files
#                      without relying on plain files, but the option is up to
#                      you. The format of this option is rendered differently
#                      depending on context:
#
#                      If this value consists of plain (scalar) key: value
#                      pairs, then they will be added to the config file as
#                      key=value.
#                      If the value is a key: list (eg. key: [itema, itemb])
#                      and the list items are scalars (ie. not mappings) then
#                      they will be added as repeating values in config file.
#                      Eg.
#                      key=value1
#                      key=value2
#                      key=value3
#                      ... etc
#                      If it has a mapping value (key: { other: stuff }) that
#                      will be added to the config as:
#                      define key {
#                        mapping_key1: mapping_value1,
#                        mapping_key2: mapping_value2,
#                        ...
#                      }
#                      Finally, if a value is a key: list where the list items
#                      are mappings, then you'll have repeated definitions like:
#                      define key {
#                        mapping_key1: mapping_value1,
#                        mapping_key2: mapping_value2,
#                      }
#                      define key {
#                        next_mapping_key1: next_mapping_value1,
#                        next_mapping_key2: next_mapping_value2,
#                      }
#                      ...
#   dest:  The destination path for the nagios config
#   owner: The owner for the created file(s). By default this will be the same
#          as the `nagios_user`
#   group: The group ownership for the created file(s). By default this will
#          be the same as the `nagios_group`
#   mode:  The permissions for the created file(s). Default is
#          `nagios_default_config_file_mode`
#   dirmode: The permissions for the destination directory.
#
nagios_configs: []
