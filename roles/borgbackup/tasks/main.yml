---
# tasks file for borgbackup
- name: Import assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

# - name: Include OS-specific variables
#   include_vars: "{{ item }}"
#   with_first_found:
#     - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
#     - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
#     - "{{ ansible_distribution }}.yml"
#     - "{{ ansible_os_family }}.yml"
#     - "{{ ansible_lsb.id }}.yml"
#     - "main.yml"

# - name: Run OS-specific tasks
#   include: "{{ item }}"
#   with_first_found:
#     - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
#     - "{{ ansible_os_family }}.yml"

- name: Install required System Packages
  ansible.builtin.package:
    name: "{{ borg_packages }}"
    state: present

- name: Create virtualenv for borg  # noqa package-latest
  ansible.builtin.pip:
    name:
      - pip
      - setuptools
    state: latest
    virtualenv: /opt/borgmatic
    virtualenv_command: "{{ python_bin }} -m venv"

- name: Install dependent Python Packages
  ansible.builtin.pip:
    name: "{{ borg_dependent_python_packages }}"
    virtualenv: /opt/borgmatic
  when: borg_dependent_python_packages is defined

- name: Install main Python Packages
  ansible.builtin.pip:
    name: "{{ borg_python_packages }}"
    virtualenv: /opt/borgmatic
  when: borg_python_packages is defined

- name: Create borgmatic command in /usr/local/bin
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      . /opt/borgmatic/bin/activate
      borgmatic "$@"
    dest: /usr/local/bin/borgmatic
    owner: root
    group: root
    mode: "0755"

- name: Ensure root has SSH key.
  ansible.builtin.user:
    name: "root"
    generate_ssh_key: yes
    ssh_key_file: "{{ ssh_key_file }}"
    ssh_key_type: ed25519
  register: root_user

- name: Print key created for root user (use for remote repo)
  ansible.builtin.debug:
    var: root_user['ssh_public_key']

- name: Ensure /etc/borgmatic exists
  ansible.builtin.file:
    path: /etc/borgmatic
    state: directory
    mode: 0700
    owner: root

- name: Add Borgmatic configuration
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "/etc/borgmatic/{{ borgmatic_config_name }}"
    mode: 0600

- name: Add cron-job for borgmatic (large repo, create and check separate)
  block:
    - name: Add cron job for regular create and prune
      ansible.builtin.cron:
        name: "{{ borgmatic_cron_name }}"
        hour: "{{ borgmatic_cron_hour }}"
        minute: "{{ borgmatic_cron_minute }}"
        user: "root"
        cron_file: "{{ borgmatic_cron_name }}"
        job: "borgmatic -c /etc/borgmatic/{{ borgmatic_config_name }} -C -p"
    - name: Add cron job for infrequent checks
      ansible.builtin.cron:
        name: "{{ borgmatic_cron_name }}-check"
        day: "{{ borgmatic_cron_checks_day }}"
        hour: "{{ borgmatic_cron_checks_hour }}"
        minute: "{{ borgmatic_cron_checks_minute }}"
        user: "root"
        cron_file: "{{ borgmatic_cron_name }}"
        job: "borgmatic -c /etc/borgmatic/{{ borgmatic_config_name }} -k"
  when: borgmatic_large_repo

- name: Add cron-job for borgmatic (normal-sized repo)
  block:
    - name: Add cron job for create, check and prune
      ansible.builtin.cron:
        name: "{{ borgmatic_cron_name }}"
        hour: "{{ borgmatic_cron_hour }}"
        minute: "{{ borgmatic_cron_minute }}"
        user: "root"
        cron_file: "{{ borgmatic_cron_name }}"
        job: "borgmatic -c /etc/borgmatic/{{ borgmatic_config_name }}"
    - name: Ensure separate check cron job is absent
      ansible.builtin.cron:
        name: "{{ borgmatic_cron_name }}-check"
        state: absent
  when: not borgmatic_large_repo

- name: Set PATH for borgmatic cron job.
  ansible.builtin.cron:
    user: "root"
    cron_file: "{{ borgmatic_cron_name }}"
    name: PATH
    env: yes
    value: /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

- name: Install yamllint for checking config file
  ansible.builtin.pip:
    name: yamllint
    executable: pip3
