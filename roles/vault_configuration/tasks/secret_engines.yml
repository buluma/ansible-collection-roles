---

- name: get secret engines
  ansible.builtin.uri:
    url: "{{ vault_configuration_url }}/v1/sys/mounts"
    method: GET
    headers: "{{ vault_configuration_headers }}"
  register: vault_configuration_mounts

- name: enable secret engine
  ansible.builtin.uri:
    url: "{{ vault_configuration_url }}/v1/sys/mounts/{{ item.path }}"
    method: POST
    headers: "{{ vault_configuration_headers }}"
    body:
      type: "{{ item.type }}"
      description: "{{ item.description | default(omit) }}"
      options: "{{ item.options | default(omit) }}"
      max_version: "{{ item.max_versions | default(omit) }}"
      cas_required: "{{ item.cas_required | default(omit) }}"
      delete_version_after: "{{ item.delete_version_after | default(omit) }}"
      config: "{{ item.config | default(omit) }}"
    body_format: json
    status_code:
      - 400
      - 204
  register: enable_secrets_engine
  changed_when:
    - enable_secrets_engine.status == 204
  when:
    - vault_configuration_secret_engines is defined
  loop: "{{ vault_configuration_secret_engines }}"
  loop_control:
    label: "{{ item.path }}"

# - name: submit ca information
#   ansible.builtin.uri:
#     url: "{{ vault_configuration_url }}/v1/{{ item.path }}/config/ca"
#     method: POST
#     headers: "{{ vault_configuration_headers }}"
#     body:
#       pem_bundle: "{{ item.ca_pem_bundle }}"
#     body_format: json
#   when:
#     - item.type == "pki"
#     - item.ca_pem_bundle is defined
#   loop: "{{ vault_configuration_secret_engines }}"
#   loop_control:
#     label: "{{ item.path }}"

- name: generate root certificate
  ansible.builtin.uri:
    url: "{{ vault_configuration_url }}/v1/{{ item.path }}/root/generate/internal"
    method: POST
    headers: "{{ vault_configuration_headers }}"
    body:
      issuing_certificates: "{{ vault_configuration_url }}/v1/{{ item.path }}/ca"
      crl_distribution_points: "{{ vault_configuration_url }}/v1/{{ item.path }}/crl"
    body_format: json
    return_content: yes
  loop: "{{ vault_configuration_secret_engines }}"
  loop_control:
    label: "{{ item.path }}"
  when:
    - item.type == "pki"
