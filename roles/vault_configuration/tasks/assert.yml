---

- name: test if vault_configuration_url is set correctly
  ansible.builtin.assert:
    that:
      - vault_configuration_url is defined
      - vault_configuration_url is string
    quiet: yes

- name: test if vault_configuration_token is set correctly
  ansible.builtin.assert:
    that:
      - vault_configuration_token is defined
      - vault_configuration_token is string
    quiet: yes

- name: test if vault_configuration_namespace is set correctly
  ansible.builtin.assert:
    that:
      - vault_configuration_namespace is iterable
    quiet: yes
  when:
    - vault_configuration_namespace is defined

- name: test if vault_configuration_secret_engines is set correctly
  ansible.builtin.assert:
    that:
      - vault_configuration_secret_engines is defined
      - vault_configuration_secret_engines is iterable
    quiet: yes

- name: test required items in vault_configuration_secret_engines
  ansible.builtin.assert:
    that:
      - item.path is defined
      - item.path is string
      - item.type is defined
      - item.type is string
      - item.type in [ "kv", "pki" ]
    quiet: yes
  loop: "{{ vault_configuration_secret_engines }}"
  loop_control:
    label: "{{ item.type }}"
  when:
    - vault_configuration_secret_engines is defined

- name: test if options in vault_configuration_secret_engines is set correctly
  ansible.builtin.assert:
    that:
      - item.options is mapping
      - item.options.version is defined
      - item.options.version is integer
    quiet: yes
  loop: "{{ vault_configuration_secret_engines }}"
  loop_control:
    label: "{{ item.options | default('No options defined.') }}"
  when:
    - vault_configuration_secret_engines is defined
    - item.options is defined

- name: test if max_versions in vault_configuration_secret_engines is set correctly
  ansible.builtin.assert:
    that:
      - item.max_versions is integer
    quiet: yes
  loop: "{{ vault_configuration_secret_engines }}"
  loop_control:
    label: "{{ item.max_versions | default('No max_versions defined.') }}"
  when:
    - vault_configuration_secret_engines is defined
    - item.max_versions is defined

- name: test if cas_required in vault_configuration_secret_engines is set correctly
  ansible.builtin.assert:
    that:
      - item.cas_required is boolean
    quiet: yes
  loop: "{{ vault_configuration_secret_engines }}"
  loop_control:
    label: "{{ item.cas_required | default('No cas_required defined.') }}"
  when:
    - vault_configuration_secret_engines is defined
    - item.cas_required is defined

- name: test if delete_version_after in vault_configuration_secret_engines is set correctly
  ansible.builtin.assert:
    that:
      - item.delete_version_after is string
    quiet: yes
  loop: "{{ vault_configuration_secret_engines }}"
  loop_control:
    label: "{{ item.delete_version_after | default('No delete_version_after defined.') }}"
  when:
    - vault_configuration_secret_engines is defined
    - item.delete_version_after is defined

- name: test optional config in vault_configuration_secret_engines
  ansible.builtin.assert:
    that:
      - item.config is mapping
    quiet: yes
  loop: "{{ vault_configuration_secret_engines }}"
  loop_control:
    label: "{{ item.config | default('No config defined.') }}"
  when:
    - vault_configuration_secret_engines is defined
    - item.config is defined

- name: test if vault_configuration_auth_engines is set correctly
  ansible.builtin.assert:
    that:
      - vault_configuration_auth_engines is iterable
    quiet: yes
  when:
    - vault_configuration_auth_engines is defined

- name: test required items in vault_configuration_auth_engines
  ansible.builtin.assert:
    that:
      - item.path is defined
      - item.path is string
      - item.type is defined
      - item.type is string
      - item.type in [ "approle", "kubernetes", "ldap", "userpass" ]
    quiet: yes
  loop: "{{ vault_configuration_auth_engines }}"
  loop_control:
    label: "{{ item.path }}"
  when:
    - vault_configuration_auth_engines is defined

- name: test optional item.description in vault_configuration_auth_engines
  ansible.builtin.assert:
    that:
      - item.description is string
    quiet: yes
  loop: "{{ vault_configuration_auth_engines }}"
  loop_control:
    label: "{{ item.description | default('No description defined.') }}"
  when:
    - vault_configuration_auth_engines is defined
    - item.description is defined

- name: test optional item.config in vault_configuration_auth_engines
  ansible.builtin.assert:
    that:
      - item.config is mapping
    quiet: yes
  loop: "{{ vault_configuration_auth_engines }}"
  loop_control:
    label: "{{ item.config | default('No config defined.') }}"
  when:
    - vault_configuration_auth_engines is defined
    - item.config is defined

- name: test optional item.config.default_lease_ttl in vault_configuration_auth_engines
  ansible.builtin.assert:
    that:
      - item.config.default_lease_ttl is number
    quiet: yes
  loop: "{{ vault_configuration_auth_engines }}"
  loop_control:
    label: "{{ item.config.default_lease_ttl | default('No default_lease_ttl defined.') }}"
  when:
    - vault_configuration_auth_engines is defined
    - item.config.default_lease_ttl is defined

- name: test optional item.config.max_lease_ttl in vault_configuration_auth_engines
  ansible.builtin.assert:
    that:
      - item.config.max_lease_ttl is number
    quiet: yes
  loop: "{{ vault_configuration_auth_engines }}"
  loop_control:
    label: "{{ item.config.max_lease_ttl | default('No max_lease_ttl defined.') }}"
  when:
    - vault_configuration_auth_engines is defined
    - item.config.max_lease_ttl is defined
