{{ ansible_managed | comment }}
{# NGINX minor module templates -- Add directives under its corresponding block #}

{# NGINX Plus HTTP API -- ngx_http_api_module #}
{% macro api(api) %}
{% if api['enable'] is defined and ((api['enable'] is boolean and api['enable'] | bool) or api['enable']['write'] is defined) %}{# 'api' directive is only available in the 'location' context #}
api{{ (' write=' + api['enable']['write'] | ternary('on', 'off')) if (api['enable']['write'] is defined and api['enable']['write'] is boolean) }};
{% endif %}
{% if api['status_zone'] %}{# 'status_zone' directive is not available in the 'http' context #}
status_zone {{ api['status_zone'] }};
{% endif %}

{% endmacro %}

{# NGINX OSS HTTP stub status -- ngx_http_stub_status_module #}
{% macro stub_status(stub_status) %}{# 'stub_status' directive is not available in the 'http' context #}
{% if stub_status is boolean and stub_status | bool %}
stub_status;
{% endif %}

{% endmacro %}

{# NGINX HTTP Autoindex -- ngx_http_autoindex_module #}
{% macro autoindex(autoindex) %}
{% if autoindex['enable'] is defined and autoindex['enable'] is boolean %}
autoindex {{ autoindex['enable'] | ternary('on', 'off') }};
{% endif %}
{% if autoindex['exact_size'] is defined and autoindex['exact_size'] is boolean %}
autoindex_exact_size {{ autoindex['exact_size'] | ternary('on', 'off') }};
{% endif %}
{% if autoindex['format'] is defined %}
autoindex_format {{ autoindex['format'] }};
{% endif %}
{% if autoindex['localtime'] is defined and autoindex['localtime'] is boolean %}
autoindex_localtime {{ autoindex['localtime'] | ternary('on', 'off') }};
{% endif %}

{% endmacro %}

{# NGINX HTTP GUNZIP -- ngx_http_gunzip_module #}
{% macro gunzip(gunzip) %}
{% if gunzip['enable'] is defined and gunzip['enable'] is boolean %}
gunzip {{ gunzip['enable'] | ternary('on', 'off') }};
{% endif %}
{% if gunzip['buffers']['number'] is defined and gunzip['buffers']['size'] is defined %}
gunzip_buffers {{ gunzip['buffers']['number'] }} {{ gunzip['buffers']['size'] }};
{% endif %}

{% endmacro %}

{# NGINX HTTP GZIP -- ngx_http_gzip_module #}
{% macro gzip(gzip) %}
{% if gzip['enable'] is defined and gzip['enable'] is boolean %}
gzip {{ gzip['enable'] | ternary('on', 'off') }};
{% endif %}
{% if gzip['buffers']['number'] is defined and gzip['buffers']['size'] is defined %}
gzip_buffers {{ gzip['buffers']['number'] }} {{ gzip['buffers']['size'] }};
{% endif %}
{% if gzip['comp_level'] is defined %}
gzip_comp_level {{ gzip['comp_level'] }};
{% endif %}
{% if gzip['disable'] is defined %}
gzip_disable {{ gzip['disable'] if gzip['disable'] is string else gzip['disable'] | join(' ') }};
{% endif %}
{% if gzip['http_version'] is defined %}
gzip_http_version {{ gzip['http_version'] }};
{% endif %}
{% if gzip['min_length'] is defined %}
gzip_min_length {{ gzip['min_length'] }};
{% endif %}
{% if gzip['proxied'] is defined %}
gzip_proxied {{ 'off' if not gzip['proxied'] else (gzip['proxied'] if gzip['proxied'] is string else gzip['proxied'] | join(' ')) }};
{% endif %}
{% if gzip['types'] is defined %}
gzip_types {{ gzip['types'] if gzip['types'] is string else gzip['types'] | join(' ') }};
{% endif %}
{% if gzip['vary'] is defined and gzip['vary'] is boolean %}
gzip_vary {{ gzip['vary'] | ternary('on', 'off') }};
{% endif %}

{% endmacro %}

{# NGINX HTTP Headers -- ngx_http_headers_module #}
{% macro headers(headers) %}
{% if headers['add_headers'] is defined %}
{% for header in headers['add_headers'] if headers['add_headers'] is not mapping %}
add_header {{ header['name'] }} {{ header['value'] }}{{ ' always' if header['always'] is defined and header['always'] is boolean and header['always'] | bool }};
{% else %}
add_header {{ headers['add_headers']['name'] }} {{ headers['add_headers']['value'] }}{{ ' always' if headers['add_headers']['always'] is defined and headers['add_headers']['always'] is boolean and headers['add_headers']['always'] | bool }};
{% endfor %}
{% endif %}
{% if headers['add_trailers'] is defined %}
{% for trailer in headers['add_trailers'] if headers['add_trailers'] is not mapping %}
add_trailer {{ trailer['name'] }} {{ trailer['value'] }}{{ ' always' if trailer['always'] is defined and trailer['always'] is boolean and trailer['always'] | bool }};
{% else %}
add_trailer {{ headers['add_trailers']['name'] }} {{ headers['add_trailers']['value'] }}{{ ' always' if headers['add_trailers']['always'] is defined and headers['add_trailers']['always'] is boolean and headers['add_trailers']['always'] | bool }};
{% endfor %}
{% endif %}
{% if headers['expires'] is defined %}
expires {{ 'off' if not headers['expires'] else (headers['expires'] if headers['expires'] is string) }}{{ 'modified ' if headers['expires']['modified'] is defined and headers['expires']['modified'] is boolean and headers['expires']['modified'] | bool }}{{ headers['expires']['time'] if headers['expires']['time'] is defined }};
{% endif %}

{% endmacro %}

{# NGINX HTTP Upstream Health Checks -- ngx_http_upstream_hc_module #}
{# Available only in NGINX Plus #}
{% macro health_check(health_check) %}
{% if health_check['health_checks'] is defined %}{# 'health_check' directive is only available in the 'location' context #}
{% for health_check in health_check['health_checks'] %}
health_check{{ (' interval=' + health_check['interval'] | string) if health_check['interval'] is defined -}}
{{- (' jitter=' + health_check['jitter'] | string) if health_check['jitter'] is defined -}}
{{- (' fails=' + health_check['fails'] | string) if health_check['fails'] is defined and health_check['fails'] is number -}}
{{- (' passes=' + health_check['passes'] | string) if health_check['passes'] is defined and health_check['passes'] is number -}}
{{- (' uri=' + health_check['uri'] | string) if health_check['uri'] is defined -}}
{{- ' mandatory' if health_check['mandatory'] is defined and health_check['mandatory'] is boolean and health_check['mandatory'] | bool -}}
{{- ' persistent' if health_check['persistent'] is defined and health_check['persistent'] is boolean and health_check['persistent'] | bool -}}
{{- (' match=' + health_check['match'] | string) if health_check['match'] is defined -}}
{{- (' port=' + health_check['port'] | string) if health_check['port'] is defined -}}
{{- ' type=grpc' if health_check['grpc_service'] is defined or health_check['grpc_status'] is defined -}}
{{- (' grpc_service=' + health_check['grpc_service'] | string) if health_check['grpc_service'] is defined -}}
{{- (' grpc_status=' + health_check['grpc_status'] | string) if health_check['grpc_status'] is defined -}}
{{- (' keepalive_time=' + health_check['keepalive_time'] | string) if health_check['keepalive_time'] is defined }};
{% endfor %}
{% endif %}
{% if health_check['match'] is defined and health_check['match'] is not string and health_check['match'] is not mapping %}{# 'match' directive is only available in the 'http' context #}
{% for match in health_check['match'] %}
match {{ match['name'] }} {
{% for condition in match['conditions'] %}
    {{ condition }};
{% endfor %}
}
{% endfor %}
{% endif %}

{% endmacro %}

{# NGINX HTTP Keyval -- ngx_http_keyval_module #}
{# Available only in NGINX Plus #}
{% macro keyval(keyval) %}{# 'keyval' module is only available in the 'http' context #}
{% if keyval['keyvals'] is defined %}
{% for keyval in keyval['keyvals'] %}
keyval {{ keyval['key'] }} {{ keyval['variable'] }} {{ 'zone=' + keyval['zone'] | string }};
{% endfor %}
{% endif %}
{% if keyval['zones'] is defined %}
{% for zone in keyval['zones'] %}
keyval_zone {{ 'zone=' + zone['name'] | string + ':' + zone['size'] | string }}{{ (' state=' + zone['state'] | string) if zone['state'] is defined }}{{ (' timeout=' + zone['timeout'] | string) if zone['timeout'] is defined }}{{ (' type=' + zone['type'] | string) if zone['type'] is defined and zone['type'] in ['string', 'ip', 'prefix'] }}{{ ' sync' if zone['sync'] is defined and zone['sync'] is boolean and zone['sync'] | bool }};
{% endfor %}
{% endif %}

{% endmacro %}

{# NGINX HTTP Limit Req -- ngx_http_limit_req_module #}
{% macro limit_req(limit_req) %}
{% if limit_req['limit_reqs'] is defined %}
{% for limit in limit_req['limit_reqs'] %}
limit_req {{ 'zone=' + limit['zone'] | string }}{{ ' burst=' + limit['burst'] | string }}{{ (' nodelay' if not limit['delay'] else (' delay=' + limit['delay'] | string)) if limit['delay'] is defined }};
{% endfor %}
{% endif %}
{% if limit_req['dry_run'] is defined and limit_req['dry_run'] is boolean %}
limit_req_dry_run {{ limit_req['dry_run'] | ternary('on', 'off') }};
{% endif %}
{% if limit_req['log_level'] is defined %}
limit_req_log_level {{ limit_req['log_level'] }};
{% endif %}
{% if limit_req['status'] is defined %}
limit_req_status {{ limit_req['status'] }};
{% endif %}
{% if limit_req['zones'] is defined %}{# 'limit_req_zone' directive is only available in the 'http' context #}
{% for zone in limit_req['zones'] %}
limit_req_zone {{ zone['key'] }} {{ 'zone=' + zone['name'] | string + ':' + zone['size'] | string }} {{ 'rate=' + zone['rate'] | string }}{{ ' sync' if zone['sync'] is defined and zone['sync'] is boolean and zone['sync'] | bool }};
{% endfor %}
{% endif %}

{% endmacro %}

{# NGINX HTTP Log -- ngx_http_log_module #}
{% macro log(log) %}
{% if log['format'] is defined %}{# 'log_format' directive is only available in the 'http' context #}
{% for format in log['format'] %}
log_format {{ format['name'] }}{{ (' escape=' + format['escape'] | string) if format['escape'] is defined and format['escape'] in ['default', 'json', 'none'] }} {{ format['format'] }};
{% endfor %}
{% endif %}
{% if log['access'] is defined and log['access'] is boolean and not log['access'] | bool %}
access_log {{ 'off' }};
{% elif log['access'] is defined %}
{% for log in log['access'] %}
access_log {{ 'off' if not log else log['path'] if log['path'] is defined }}{{ (' ' + log['format'] | string) if log['format'] is defined -}}
{{- (' buffer=' + log['buffer'] | string) if log['buffer'] is defined -}}
{{- ' gzip' if log['gzip'] is defined and log['access']['gzip'] is boolean and log['gzip'] | bool else (' gzip=' + log['gzip'] | string) if log['gzip'] is defined and log['gzip'] is string -}}
{{- (' flush=' + log['flush'] | string) if log['flush'] is defined -}}
{{- (' if=' + log['if']) if log['if'] is defined }};
{% endfor %}
{% endif %}
{% if log['error'] is defined %}{# This does not belong here but we are making an exception #}
{% for log in log['error'] if (log['error'] is not mapping and log['error'] is not string) %}
error_log {{ log if log is string else log['file'] }}{{ (' ' + log['level'] | string) if log['level'] is defined }};
{% else %}
error_log {{ log['error'] if log['error'] is string else log['error']['file'] }}{{ (' ' + log['error']['level'] | string) if log['error']['level'] is defined }};
{% endfor %}
{% endif %}
{% if log['open_log_file_cache'] is defined %}
open_log_file_cache {{ 'off' if not log['open_log_file_cache'] else ('max=' + log['open_log_file_cache']['max'] | string) }}{{ (' inactive=' + log['open_log_file_cache']['inactive'] | string) if log['open_log_file_cache']['inactive'] is defined }}{{ (' min_uses=' + log['open_log_file_cache']['min_uses'] | string) if log['open_log_file_cache']['min_uses'] is defined and log['open_log_file_cache']['min_uses'] is number }}{{ (' valid=' + log['open_log_file_cache']['valid'] | string) if log['open_log_file_cache']['valid'] is defined }};
{% endif %}

{% endmacro %}

{# NGINX HTTP Map -- ngx_http_map_module #}
{% macro map(map) %}{# 'map' module is only available in the 'http' context #}
{% if map['hash_bucket_size'] is defined %}
map_hash_bucket_size {{ map['hash_bucket_size'] }};
{% endif %}
{% if map['hash_max_size'] is defined %}
map_hash_max_size {{ map['hash_max_size'] }};
{% endif %}
{% if map['mappings'] is defined %}
{% for map_data in map['mappings'] %}
{% if map_data['string'] is defined and map_data['variable'] is defined %}
map {{ map_data['string'] }} {{ map_data['variable'] }} {
{% if map_data['hostnames'] is defined and map_data['hostnames'] is boolean and map_data['hostnames'] | bool %}
    hostnames;
{% endif %}
{% if map_data['volatile'] is defined and map_data['volatile'] is boolean and map_data['volatile'] | bool %}
    volatile;
{% endif %}
{% if map_data['content'] is defined %}
{% for content_line in map_data['content'] if map_data['content'] is not mapping %}
    {{ content_line['value'] }} {{ content_line['new_value'] }};
{% else %}
    {{ map_data['content']['value'] }} {{ map_data['content']['new_value'] }};
{% endfor %}
{% endif %}
}
{% endif %}
{% endfor %}
{% endif %}

{% endmacro %}

{# NGINX HTTP Mirror -- ngx_http_mirror_module #}
{% macro mirror(mirror) %}
{% if mirror['uri'] is defined and mirror['uri'] is not mapping %}
{%  for uri in mirror['uri'] if mirror['uri'] is not string %}
mirror {{ 'off' if not uri else uri }};
{% else %}
mirror {{ 'off' if not mirror['uri'] else mirror['uri'] }};
{% endfor %}
{% endif %}
{% if mirror['request_body'] is defined and mirror['request_body'] is boolean %}
mirror_request_body {{ mirror['request_body'] | ternary('on', 'off') }};
{% endif %}

{% endmacro %}

{# NGINX HTTP RealIP -- ngx_http_realip_module #}
{% macro realip(realip) %}
{% if realip['set_real_ip_from'] is defined %}
set_real_ip_from {{ realip['set_real_ip_from'] }};
{% endif %}
{% if realip['real_ip_header'] is defined %}
real_ip_header {{ realip['real_ip_header'] }};
{% endif %}
{% if realip['real_ip_recursive'] is defined and realip['real_ip_recursive'] is boolean %}
real_ip_recursive {{ realip['real_ip_recursive'] | ternary('on', 'off') }};
{% endif %}

{% endmacro %}

{# NGINX HTTP Rewrite -- ngx_http_rewrite_module #}
{% macro rewrite(rewrite) %}
{% if rewrite['return'] is defined %}{# 'return' directive is not available in the 'http' context #}
return {{ rewrite['return'] if (rewrite['return'] is string or rewrite['return'] is number) }}{{ rewrite['return']['code'] if rewrite['return']['code'] is defined }}{{ (' ' + rewrite['return']['text'] | string) if rewrite['return']['text'] is defined }}{{ (' ' + rewrite['return']['url'] | string) if rewrite['return']['url'] is defined }};
{% endif %}
{% if rewrite['rewrites'] is defined %}{# 'rewrite' directive is not available in the 'http' context #}
{% for rewrite in rewrite['rewrites'] if rewrite['rewrites'] is not mapping %}
rewrite {{ rewrite['regex'] }} {{ rewrite['replacement'] }}{{ (' ' + rewrite['flag'] | string) if rewrite['flag'] is defined and rewrite['flag'] in ['last', 'break', 'redirect', 'permanent'] }};
{% else %}
rewrite {{ rewrite['rewrites']['regex'] }} {{ rewrite['rewrites']['replacement'] }}{{ (' ' + rewrite['rewrites']['flag'] | string) if rewrite['rewrites']['flag'] is defined and rewrite['rewrites']['flag'] in ['last', 'break', 'redirect', 'permanent'] }};
{% endfor %}
{% endif %}
{% if rewrite['log'] is defined and rewrite['log'] is boolean %}
rewrite_log {{ rewrite['log'] | ternary('on', 'off') }};
{% endif %}
{% if rewrite['set'] is defined %}{# 'set' directive is not available in the 'http' context #}
{% for set in rewrite['set'] if rewrite['set'] is not mapping %}
set {{ set['variable'] }} {{ set['value'] }};
{% else %}
set {{ rewrite['set']['variable'] }} {{ rewrite['set']['value'] }};
{% endfor %}
{% endif %}
{% if rewrite['uninitialized_variable_warn'] is defined and rewrite['uninitialized_variable_warn'] is boolean %}
uninitialized_variable_warn {{ rewrite['uninitialized_variable_warn'] | ternary('on', 'off') }};
{% endif %}

{% endmacro %}

{# NGINX HTTP Split Clients -- ngx_http_split_clients_module #}
{% macro split_clients(split_clients) %}{# 'split_clients' directive is only available in the 'http' context #}
{% if split_clients['string'] is defined and split_clients['variable'] is defined %}
split_clients {{ split_clients['string'] }} {{ split_clients['variable'] }} {
{% if split_clients['content'] is defined %}
{% for content_line in split_clients['content'] if split_clients['content'] is not mapping  %}
    {{ content_line['percentage'] }} {{ content_line['value'] }};
{% else %}
    {{ split_clients['content']['percentage'] }} {{ split_clients['content']['value'] }};
{% endfor %}
{% endif %}
}
{% endif %}

{% endmacro %}

{# NGINX HTTP Sub Filter -- ngx_http_sub_module #}
{% macro sub_filter(sub_filter) %}
{% if sub_filter['sub_filters'] is defined %}
{% for sub_filter in sub_filter['sub_filters'] if sub_filter['sub_filters'] is not mapping %}
sub_filter {{ sub_filter['string'] }} {{ sub_filter['replacement'] }};
{% else %}
sub_filter {{ sub_filter['sub_filters']['string'] }} {{ sub_filter['sub_filters']['replacement'] }};
{% endfor %}
{% endif %}
{% if sub_filter['last_modified'] is defined and sub_filter['last_modified'] is boolean %}
sub_filter_last_modified {{ sub_filter['last_modified'] | ternary('on', 'off') }};
{% endif %}
{% if sub_filter['once'] is defined and sub_filter['once'] is boolean %}
sub_filter_once {{ sub_filter['once'] | ternary('on', 'off') }};
{% endif %}
{% if sub_filter['types'] is defined %}
sub_filter_types {{ sub_filter['types'] if sub_filter['types'] is string else sub_filter['types'] | join(' ') }};
{% endif %}

{% endmacro %}
