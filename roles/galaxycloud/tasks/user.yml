---
# Create Galaxy user
# This recipe is mandatory to correctly setup users and permissions

#______________________________________
# [Docker] Install sudo and sudoers fix

- name: '[EL] [Docker] Install sudo'
  yum:
    name: sudo
    state: present
  when: ansible_os_family == "RedHat" and ansible_virtualization_type == "docker"

- name: '[EL] [Docker] Edit sudoers to remove requiretty option'
  lineinfile:
    dest: '/etc/sudoers'
    regexp: '{{ item.regexp }}'
    state: absent
  with_items:
    - { regexp: '# Disable "ssh hostname sudo <cmd>", because it will show the password in clear.' }
    - { regexp: '#         You have to run "ssh -t hostname sudo <cmd>".' }
    - { regexp: 'Defaults    requiretty' }
  when: (ansible_os_family == "RedHat" and ansible_virtualization_type == "docker")

- name: '[EL] Enable to run script in /usr/local/bin with sudo'
  replace:
    dest: '/etc/sudoers'
    regexp: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin'
    replace: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
  when: ansible_os_family == "RedHat"

- name: '[Ubuntu 16.04] [Docker] Install sudo'
  apt:
    name: sudo
    state: present
  when: ansible_os_family == "Debian" and ansible_distribution_version == "16.04" and ansible_virtualization_type == "docker"

#______________________________________
# Create Galaxy user

- name: '[EL] Create user {{ galaxy_user }} on the server'
  user:
    name: '{{ galaxy_user }}'
    shell: '/bin/bash'
    groups: adm,wheel,systemd-journal
    uid: '{{ GALAXY_UID }}'
  when: ansible_os_family == "RedHat"

- name: '[Ubuntu] Create user {{ galaxy_user }} on the server'
  user:
    name: '{{ galaxy_user }}'
    shell: '/bin/bash'
    uid: '{{ GALAXY_UID }}'
  when: ansible_os_family == "Debian"

- name: 'Inject ssh public key - {{ galaxy_user }}'
  authorized_key:
    user: '{{ galaxy_user }}'
    key: '{{ galaxy_instance_key_pub }}'
  become: true
  become_user: '{{ galaxy_user }}'
  register: authorized_key_galaxy_user_result
  failed_when: ('invalid key specified' in authorized_key_galaxy_user_result.stderr)
  ignore_errors: true

- name: 'User rules for {{ galaxy_user }}'
  lineinfile:
    dest: '/etc/sudoers'
    state: present 
    line: '{{ galaxy_user }} ALL=(ALL) NOPASSWD:ALL'
    insertafter: EOF

- name: 'Inject ssh public key - root'
  authorized_key:
    user: 'root'
    key: '{{ galaxy_instance_key_pub }}'
  register: authorized_key_root_result
  failed_when: ('invalid key specified' in authorized_key_root_result.stderr)
  ignore_errors: true
