---
# tasks file for crowd

- name: import assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

- name: import prepare.yml
  ansible.builtin.import_tasks: prepare.yml
  run_once: yes

- name: install requirements
  ansible.builtin.package:
    name: "{{ crowd_requirements }}"

- name: groupadd
  ansible.builtin.group:
    name: "{{ crowd_group }}"
    system: true
    state: "present"

- name: useradd
  ansible.builtin.user:
    name: "{{ crowd_owner }}"
    group: "{{ crowd_group }}"
    home: "{{ crowd_home }}"
    shell: "/usr/sbin/nologin"
    system: true
    create_home: false
    state: "present"

- name: prepare directories
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  loop:
    - { dest: "/etc/systemd/system" }
    - dest: "{{ crowd_catalina }}"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
    - dest: "{{ crowd_catalina }}/apache-tomcat/bin"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
    - dest: "{{ crowd_catalina }}/apache-tomcat/conf"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
    - dest: "{{ crowd_home }}"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"

- name: download archive
  ansible.builtin.shell: |
    set -euxo pipefail
    mkdir -p /var/log/ansible
    exec &> >(tee -a /var/log/ansible/{{ item.checksum }}-get_url.log)
    TMP_DIR="$(mktemp -d)" \
      && cd $TMP_DIR \
      && mkdir -p .{{ item.dest | dirname }} \
      && curl -skL -m 300 {{ item.url }} > .{{ item.dest }} \
      && echo -n "{{ item.checksum }} .{{ item.dest }}" | sha256sum -c - \
      && mkdir -p {{ item.dest | dirname }} \
      && mv .{{ item.dest }} {{ item.dest }} \
      && rm -rf $TMP_DIR
  args:
    executable: "/bin/bash"
    creates: "/var/log/ansible/{{ item.checksum }}-get_url.log"
  loop:
    - "{{ crowd_download }}"
    - "{{ postgresql_jdbc_download }}"
  register: result
  until: result is succeeded

- name: unarchive package
  ansible.builtin.shell: |
    set -euxo pipefail
    mkdir -p /var/log/ansible
    exec &> >(tee -a /var/log/ansible/{{ crowd_download.checksum }}-unarchive.log)
    rm -rf {{ crowd_catalina }} \
      && mkdir -p {{ crowd_catalina }}
    cd {{ crowd_catalina }}
    TMP_DIR="$(mktemp -d)" \
      && tar -zx -C $TMP_DIR -f {{ crowd_download.dest }} \
      && cp -rfT $TMP_DIR/* . \
      && rm -rf $TMP_DIR
    cd {{ crowd_catalina }}/apache-tomcat/lib
    rm -rf *postgresql*.jar
    cp {{ postgresql_jdbc_download.dest }} .
    chown -Rf {{ crowd_owner }}:{{ crowd_group }} {{ crowd_catalina }}
    chmod 0755 \
      {{ crowd_catalina }} \
      {{ crowd_catalina }}/apache-tomcat/bin \
      {{ crowd_catalina }}/apache-tomcat/conf
  args:
    executable: "/bin/bash"
    creates: "/var/log/ansible/{{ crowd_download.checksum }}-unarchive.log"
  notify:
    - systemctl daemon-reload
    - systemctl restart crowd.service

- name: patch {{ crowd_catalina }}/build.properties
  ini_file:
    path: "{{ crowd_catalina }}/build.properties"
    section: ""
    option: "crowd.url"
    value: "http://localhost:8095{{ crowd_catalina_context_path or '' }}"
    mode: "0644"
    no_extra_spaces: true
    state: "present"
  notify:
    - update build with ant
    - systemctl daemon-reload
    - systemctl restart crowd.service

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: copy templates
  ansible.builtin.template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - { dest: "/etc/systemd/system/crowd.service" }
    - dest: "{{ crowd_catalina }}/apache-tomcat/bin/setenv.sh"
      src: "./templates/opt/atlassian/crowd/apache-tomcat/bin/setenv.sh.j2"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
      mode: "0755"
    - dest: "{{ crowd_catalina }}/apache-tomcat/conf/server.xml"
      src: "./templates/opt/atlassian/crowd/apache-tomcat/conf/server.xml.j2"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
    - dest: "{{ crowd_catalina }}/start_crowd.sh"
      src: "./templates/opt/atlassian/crowd/start_crowd.sh.j2"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
      mode: "0755"
  notify:
    - systemctl daemon-reload
    - systemctl restart crowd.service

- name: prepare files
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/systemd/system/crowd.service" }
    - dest: "{{ crowd_catalina }}/apache-tomcat/bin/setenv.sh"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
      mode: "0755"
    - dest: "{{ crowd_catalina }}/apache-tomcat/conf/server.xml"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
    - dest: "{{ crowd_catalina }}/start_crowd.sh"
      owner: "{{ crowd_owner }}"
      group: "{{ crowd_group }}"
      mode: "0755"
  notify:
    - systemctl daemon-reload
    - systemctl restart crowd.service

- name: patch {{ crowd_catalina }}/apache-tomcat/conf/web.xml
  vars:
    ansible_python_interpreter: "python3"
  xml:
    path: "{{ crowd_catalina }}/apache-tomcat/conf/web.xml"
    xpath: "/ns:web-app/ns:session-config/ns:session-timeout"
    namespaces:
      ns: "http://xmlns.jcp.org/xml/ns/javaee"
    value: "{{ crowd_session_timeout | int }}"
    state: "present"
  notify:
    - systemctl restart crowd.service

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: systemctl start crowd.service
  ansible.builtin.service:
    name: "crowd.service"
    state: "started"
    enabled: true
  changed_when: false
  failed_when: false
