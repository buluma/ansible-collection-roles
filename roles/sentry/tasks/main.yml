---
- name: Install packages required by Sentry
  apt: name={{ packages }} state=present
  vars:
      packages:
          - python3-virtualenv
          - python3-setuptools
          - python3-dev
          - libxslt1-dev
          - gcc
          - pkg-config
          - libffi-dev
          - libjpeg-dev
          - libxml2-dev
          - libxmlsec1-dev
          - libxmlsec1-openssl
          - libxslt-dev
          - libyaml-dev
          - libpq-dev
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2
  when: ansible_os_family == 'Debian'

- name: Install packages required by Sentry
  yum: name={{ packages }} state=present
  vars:
      packages:
          - python3-virtualenv
          - python3-setuptools
          - python3-devel
          - pkg-config
          - gcc
          - gcc-c++
          - libffi-devel
          - libjpeg-turbo-devel
          - libxml2-devel
          - libxmlsec1-dev
          - libxmlsec1-openssl
          - libxslt-devel
          - libyaml-devel
          - libpq-dev
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2
  when: ansible_os_family == 'RedHat'

- name: Add Sentry group
  ansible.builtin.group:
      name: '{{ sentry_system_group }}'
      state: present

- name: Add Sentry user
  ansible.builtin.user:
      name: '{{ sentry_system_user }}'
      group: '{{ sentry_system_group }}'
      state: present

# - name: Check virtualenv path
#   ansible.builtin.shell:
#       cmd: ls -l /usr/bin
#       chdir: /usr/bin/

- name: Create a virtualenv and install Sentry with pip
  ansible.builtin.pip:
      name: sentry
      version: '{{ sentry_version }}'
      virtualenv: '{{ sentry_install_dir }}'
      virtualenv_python: /usr/bin/python3
      state: present
  register: _virtualenv_install
  until: _virtualenv_install is success
  retries: 10
  delay: 2

- name: Install extra packages in the virtualenv
  ansible.builtin.pip:
      name: '{{ sentry_extra_pip_packages }}'
      virtualenv: '{{ sentry_install_dir }}'
      virtualenv_python: /usr/bin/python3
      state: present
  register: _virtualenv_extra
  until: _virtualenv_extra is success
  retries: 10
  delay: 2

- name: Fail when secret-key is UNSAFE
  ansible.builtin.fail:
      msg: |
        The secret key has not been set, please generate a new secret key.
        If key ever becomes compromised, it's important to regenerate a new key
        Changing this value will result in all current sessions being invalidated.
        A new key can be generated with `$ sentry config generate-secret-key`
  when: sentry_config_yml['system.secret-key'] is match('UNSAFE')

- name: Create etc-dir for Sentry
  ansible.builtin.file:
      path: '{{ sentry_install_dir }}/etc'
      state: directory

- name: Write config.yml
  no_log: true
  ansible.builtin.copy:
      content: '{{ sentry_config_yml|to_nice_yaml }}'
      dest: '{{ sentry_install_dir }}/etc/config.yml'
  notify: restart sentry
  register: _config_yml
  when: not sentry_config_yml['system.secret-key'] is match('UNSAFE')

- name: Write sentry.conf.py
  no_log: true
  ansible.builtin.template:
      src: sentry.conf.py
      dest: '{{ sentry_install_dir }}/etc/sentry.conf.py'
  notify: restart sentry
  register: _sentry_conf_py

- name: Configure Systemd
  ansible.builtin.template:
      src: '{{ item }}'
      dest: '/etc/systemd/system/{{ item }}'
  with_items:
      - sentry-web.service
      - sentry-worker.service
      - sentry-cron.service
  notify: restart sentry

- name: Enable sentry-web
  ansible.builtin.service:
      name: sentry-web
      enabled: true

- name: Initialize/Upgrade Sentry database
  shell: '{{ sentry_install_dir }}/bin/sentry --config {{ sentry_install_dir }}/etc upgrade --noinput'
  vars:
      ansible_ssh_pipelining: true
  notify: restart sentry
  tags: ['skip_ansible_lint']
  run_once: true
  when: _virtualenv_install is changed or
        _virtualenv_extra is changed or
        _config_yml is changed or
        _sentry_conf_py is changed
  ignore_errors: yes

- name: Install cronjob to cleanup Sentry
  ansible.builtin.cron:
      name: 'Cleanup Sentry'
      job: |
        '{{ sentry_install_dir }}/bin/sentry --config {{ sentry_install_dir }}/etc cleanup
        --days={{ sentry_cleanup_days }}'
      hour: '{{ sentry_system_cron_hour }}'
      minute: '{{ sentry_system_cron_minute }}'
      user: '{{ sentry_system_user }}'
  when: sentry_schedule_cleanup
  ignore_errors: yes

- name: Make sure the Sentry user is the owner
  ansible.builtin.file:
      path: '{{ sentry_install_dir }}'
      owner: '{{ sentry_system_user }}'
      group: '{{ sentry_system_group }}'
