---
# tasks file for pg_partman

# - name: Verify postgresql 10 is installed
#   ansible.builtin.stat:
#     path: /var/lib/pgsql/10/data/PG_VERSION
#   register: pg_version
#   failed_when: not pg_version.stat.exists
#   changed_when: false

- name: Install postgresql 10 yum repository
  ansible.builtin.package:
    name: "{{ partman_postgresql_10_repo_url }}"
    state: present

- name: Install pg_partman for postgresql 10
  ansible.builtin.package:
    name: pg_partman10
    state: present

- name: Check if shared_preload_libraries already exists in postgresql.conf
  ansible.builtin.shell: |
    grep "^shared_preload_libraries" /var/lib/pgsql/10/data/postgresql.conf
  args:
    executable: /bin/bash
  register: shared_preload_libraries_return
  check_mode: false
  ignore_errors: true
  changed_when: false

- name: Add the shared_preload_libraries config for enabling the pg_partman_bgw shared libraries (New Line)
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: ^shared_preload_libraries =
    insertafter: '^# Add settings for extensions here'
    line: shared_preload_libraries = 'pg_partman_bgw'
    backup: true
  when:
    - shared_preload_libraries_return.rc == 1
    - partman_bgw_enabled
  notify: Restart postgresql

- name: Update the shared_preload_libraries config for enabling the pg_partman_bgw shared libraries (Existing Line)
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: ^((?=shared_preload_libraries)(?!.*pg_partman_bgw).*\s*=\s*'.*)('.*)
    line: \1, pg_partman_bgw\2
    backrefs: true
    backup: true
  when:
    - shared_preload_libraries_return.rc == 0
    - partman_bgw_enabled
  notify: Restart postgresql

- name: Config for pg_partman_bgw.dbname
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: ^pg_partman_bgw.dbname
    insertafter: '^# Add settings for extensions here'
    line: "pg_partman_bgw.dbname  = '{{ partman_bgw_dbname }}'"
  when: partman_bgw_enabled
  notify: Restart postgresql

- name: Config for pg_partman_bgw.interval
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: ^pg_partman_bgw.interval
    insertafter: '^# Add settings for extensions here'
    line: "pg_partman_bgw.interval  = '{{ partman_bgw_interval }}'"
  when: partman_bgw_enabled
  notify: Restart postgresql

- name: Config for pg_partman_bgw.role
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: ^pg_partman_bgw.role
    insertafter: '^# Add settings for extensions here'
    line: "pg_partman_bgw.role  = '{{ partman_bgw_role }}'"
  when: partman_bgw_enabled
  notify: Restart postgresql

- name: Config for pg_partman_bgw.analyze
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: ^pg_partman_bgw.analyze
    insertafter: '^# Add settings for extensions here'
    line: "pg_partman_bgw.analyze  = '{{ partman_bgw_analyze }}'"
  when: partman_bgw_enabled
  notify: Restart postgresql

- name: Config for pg_partman_bgw.jobmon
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/10/data/postgresql.conf
    regexp: ^pg_partman_bgw.jobmon
    insertafter: '^# Add settings for extensions here'
    line: "pg_partman_bgw.jobmon  = '{{ partman_bgw_jobmon }}'"
  when: partman_bgw_enabled
  notify: Restart postgresql

- name: Get a list of postgresql extension
  ansible.builtin.shell: psql -c "SELECT * FROM pg_extension;"
  args:
    executable: /bin/bash
  register: postgresql_plugin_list
  become: true
  become_user: postgres
  become_method: sudo
  changed_when: false

- name: Create the pg_partman schema
  ansible.builtin.shell: "psql -c \"CREATE SCHEMA {{ partman_schema }};\""
  args:
    executable: /bin/bash
  register: enable_partman
  become: true
  become_user: postgres
  become_method: sudo
  failed_when: '"CREATE SCHEMA" not in enable_partman.stdout'
  changed_when: false
  when:
    - '"pg_partman" not in postgresql_plugin_list.stdout'

- name: Enable the pg_partman extension
  ansible.builtin.shell: "psql -c \"CREATE EXTENSION pg_partman SCHEMA {{ partman_schema }};\""
  args:
    executable: /bin/bash
  register: enable_partman
  become: true
  become_user: postgres
  become_method: sudo
  failed_when: '"CREATE EXTENSION" not in enable_partman.stdout'
  changed_when: false
  when:
    - '"pg_partman" not in postgresql_plugin_list.stdout'
