---
# tasks file for tigervnc

- name: import assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

- name: install software
  ansible.builtin.package:
    name: "{{ tigervnc_packages }}"
    state: present

- name: create .vnc directory
  ansible.builtin.file:
    path: /home/{{ tigervnc_username }}/.vnc
    owner: "{{ tigervnc_username }}"
    group: "{{ tigervnc_groupname }}"
    state: directory
    mode: "755"

- name: generate vnc password
  ansible.builtin.shell:
    cmd: set -o pipefail ; printf "{{ tigervnc_password }}\n{{ tigervnc_password }}\n" | vncpasswd
    creates: /home/{{ tigervnc_username }}/.vnc/passwd
    executable: /bin/bash
  become: yes
  become_user: "{{ tigervnc_username }}"
  when:
    - not tigervnc_user_exists

- name: place xvncstartup
  ansible.builtin.template:
    src: xstartup
    dest: "/home/{{ tigervnc_username }}/.vnc/xstartup"
    owner: "{{ tigervnc_username }}"
    group: "{{ tigervnc_groupname }}"
    mode: "755"
  notify:
    - restart tigervnc

- name: place config
  ansible.builtin.template:
    src: config
    dest: "/home/{{ tigervnc_username }}/.vnc/config"
    owner: "{{ tigervnc_username }}"
    group: "{{ tigervnc_groupname }}"
    mode: "644"
  notify:
    - restart tigervnc
  when:
    - ansible_distribution in [ "CentOS", "RedHat", "Rocky" ]

- name: place .Xclients
  ansible.builtin.copy:
    content: "{{ tigervnc_desktop_session }}"
    dest: "/home/{{ tigervnc_username }}/.Xclients"
    owner: "{{ tigervnc_username }}"
    group: "{{ tigervnc_groupname }}"
    mode: "a+x"

- name: map users to displays
  ansible.builtin.lineinfile:
    path: /etc/tigervnc/vncserver.users
    line: :1={{ tigervnc_username }}
  when:
    - ansible_os_family == "RedHat"
  notify:
    - restart tigervnc

- name: place service unit
  ansible.builtin.template:
    src: vncserver.service.j2
    dest: /etc/systemd/system/vncserver@.service
    mode: "0644"
  notify:
    - systemctl daemon-reload
  when:
    - ansible_os_family == "Debian"

- name: flush handlers
  ansible.builtin.meta: "flush_handlers"

- name: start software
  ansible.builtin.service:
    name: "{{ tigervnc_service }}"
    state: started
    enabled: yes
    daemon-reload: yes
