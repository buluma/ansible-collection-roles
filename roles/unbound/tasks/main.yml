---
# tasks file for unbound

- name: import assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

- name: install requirements
  ansible.builtin.package:
    name: "{{ unbound_requirements }}"
    state: present

- name: download archive
  ansible.builtin.unarchive:
    src: "https://nlnetlabs.nl/downloads/unbound/unbound-{{ unbound_version }}.tar.gz"
    dest: "{{ unbound_temporary_directory }}"
    list_files: yes
    remote_src: yes
    creates: "{{ unbound_temporary_directory }}/unbound-{{ unbound_version }}"
    mode: "0755"
  notify:
    - configure
    - make
    - make install
    - install service

- name: make group unbound
  ansible.builtin.group:
    name: unbound
    system: yes

- name: make user unbound
  ansible.builtin.user:
    name: unbound
    group: unbound
    system: yes

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: replace values in service file
  ansible.builtin.replace:
    path: /etc/systemd/system/unbound.service
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace | default(omit) }}"
    mode: "0755"
  loop:
    - regexp: "@UNBOUND_SBIN_DIR@"
      replace: /usr/local/sbin
    - regexp: "@UNBOUND_RUN_DIR@"
    - regexp: "@UNBOUND_CHROOT_DIR@"
    - regexp: "@UNBOUND_PIDFILE@"
  notify:
    - systemctl daemon-reload

- name: comment lines in service file
  ansible.builtin.replace:
    path: /etc/systemd/system/unbound.service
    regexp: "^({{ item }}.*)"
    replace: '#\1'
    mode: "0755"
  loop:
    - CapabilityBoundingSet
    - ProtectSystem
    - SystemCallFilter

- name: configure unbound
  ansible.builtin.template:
    src: unbound.conf.j2
    dest: /usr/local/etc/unbound/unbound.conf
    validate: /usr/local/sbin/unbound-checkconf %s
    mode: "0644"
  notify:
    - restart unbound

- name: flush handlers again
  ansible.builtin.meta: flush_handlers

- name: start and enable unbound
  ansible.builtin.service:
    name: unbound
    state: started
    enabled: yes
