---
# tasks file for grafana_conf

- name: List organisations
  uri:
    method: GET
    url: '{{ grafana_conf_grafana_api }}/orgs'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    return_content: true
    force_basic_auth: true
  register: grafana_orgs

- name: Create organisation if it doesn't exist
  uri:
    method: POST
    url: '{{ grafana_conf_grafana_api }}/orgs'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    body_format: json
    body:
      name: '{{ grafana_conf_organisation }}'
    force_basic_auth: true
  when: "grafana_conf_organisation not in grafana_orgs.json|map(attribute='name')|unique"

- name: Lookup organisation
  uri:
    method: GET
    url: '{{ grafana_conf_grafana_api }}/orgs/name/{{ grafana_conf_organisation }}'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    return_content: true
    force_basic_auth: true
  register: grafana_conf_org

- name: Check if {{ grafana_conf_grafana_admin_user }} user is in organisation
  uri:
    method: GET
    url: '{{ grafana_conf_grafana_api }}/user/orgs'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    return_content: true
    force_basic_auth: true
  register: grafana_conf_userorgs

- name: Add {{ grafana_conf_grafana_admin_user }} user to organisation
  uri:
    method: POST
    url: '{{ grafana_conf_grafana_api }}/orgs/{{ grafana_conf_org.json.id }}/users'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    body_format: json
    body:
      loginOrEmail: '{{ grafana_conf_grafana_admin_user }}'
      role: Admin
    force_basic_auth: true
  when: grafana_conf_org.json.id not in grafana_conf_userorgs.json|map(attribute='orgId')|list

- name: Switch active organisation for {{ grafana_conf_grafana_admin_user }} user
  uri:
    method: POST
    url: '{{ grafana_conf_grafana_api }}/user/using/{{ grafana_conf_org.json.id }}'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    force_basic_auth: true

- name: Find existing datasources
  uri:
    method: GET
    url: '{{ grafana_conf_grafana_api_datasources }}'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    return_content: true
    force_basic_auth: true
  register: grafana_conf_existing_datasources

- name: Generate list of enabled datasources
  vars:
    # This variable is used to template the datasources
    datasource: "{{ item.value }}"
  set_fact:
    grafana_conf_enabled_datasources:
      "{{ grafana_conf_enabled_datasources + [grafana_conf_grafana_datasource_definitions[item.key]] }}"
  with_dict:
    "{{ grafana_conf_grafana_datasources }}"

- name: Add datasources which are enabled but aren't already configured
  uri:
    method: POST
    url: '{{ grafana_conf_grafana_api_datasources }}'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    body_format: json
    body: "{{ item }}"
    force_basic_auth: true
  with_items: "{{ grafana_conf_enabled_datasources|extract_new_datasources(grafana_conf_existing_datasources['content']) }}"
  changed_when: True

- name: Find existing dashboards in Grafana
  uri:
    method: GET
    url: '{{ grafana_conf_grafana_api }}/search'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    return_content: true
    force_basic_auth: true
  register: grafana_conf_existing_dashboards

- name: Validate dashboard repo configuration
  set_fact:
    grafana_conf_dashboard_repo_set: "{{
      (grafana_conf_grafana_dashboard_repo.get('repo') is not none) and
      (grafana_conf_grafana_dashboard_repo.get('checkout_path') is not none) and
      (grafana_conf_grafana_dashboard_repo.get('relative_path') is not none) }}"

- name: Ensure a directory exists to clone the dashboard repo into
  file:
    path: "{{ grafana_conf_grafana_dashboard_repo.checkout_path }}"
    state: directory
    mode: 0755
    owner: "{{ ansible_facts.user_uid }}"
    group: "{{ ansible_facts.user_gid }}"
  become: True
  when: grafana_conf_dashboard_repo_set

- name: Clone dashboards
  git:
    repo: "{{ grafana_conf_grafana_dashboard_repo.repo }}"
    dest: "{{ grafana_conf_grafana_dashboard_repo.checkout_path }}"
    version: "{{ grafana_conf_grafana_dashboard_repo.version | default('HEAD') }}"
    key_file: "{{ grafana_conf_key_file | default(None) }}"
  when: grafana_conf_dashboard_repo_set

- name: Find dashboards from specified git repo
  find:
    path: '{{ grafana_conf_grafana_dashboard_repo.checkout_path ~ grafana_conf_grafana_dashboard_repo.relative_path }}'
    file_type: file
    patterns: '*.json'
  register: grafana_conf_available_dashboards_git
  when: grafana_conf_dashboard_repo_set

- name: Find dashboards from specified path
  find:
    path: '{{ grafana_conf_grafana_dashboard_path }}'
    file_type: file
    patterns: '*.json'
  register: grafana_conf_available_dashboards_path
  when: grafana_conf_grafana_dashboard_path | length > 0

- name: Slurp available dashboards
  slurp:
    src: "{{ item['path'] }}"
  register: grafana_conf_available_dashboard_contents
  with_items:
    - "{{ grafana_conf_available_dashboards_git['files'] | default([]) }}"
    - "{{ grafana_conf_available_dashboards_path['files'] | default([]) }}"

- name: Add new dashboards
  uri:
    method: POST
    url: '{{ grafana_conf_grafana_api }}/dashboards/db'
    user: '{{ grafana_conf_grafana_admin_user }}'
    password: '{{ grafana_conf_grafana_admin_pass }}'
    body_format: json
    body: "{{ item }}"
    force_basic_auth: true
  changed_when: True
  with_items: "{{ grafana_conf_available_dashboard_contents['results']|extract_new_dashboards(grafana_conf_existing_dashboards) }}"
  when: grafana_conf_available_dashboard_contents['results'] is defined
